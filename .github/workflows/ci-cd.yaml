name: CI Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NODE_VERSION: "21.7.2"

jobs:
  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
      
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      
      - name: Lint
        run: yarn lint
      
      - name: Run tests
        run: yarn test
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test:test@localhost:5432/test_db

  build-and-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=raw,value=develop,enable=${{ github.ref == 'refs/heads/develop' }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
      
      - name: Build Summary
        if: success()
        run: |
          echo "‚úÖ Docker image built and pushed successfully!"
          echo ""
          echo "üì¶ Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          echo "üè∑Ô∏è  Tags: ${{ steps.meta.outputs.tags }}"
          echo "üî® Commit: ${{ github.sha }}"
          echo "üåø Branch: ${{ github.ref_name }}"

  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT || 22 }}
          script: |
            # Login no GitHub Container Registry
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # Parar e remover container anterior
            docker stop api-jornada-pulmonar 2>/dev/null || true
            docker rm api-jornada-pulmonar 2>/dev/null || true
            
            # Puxar nova imagem
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            
            # Iniciar novo container com vari√°veis do GitHub Secrets
            docker run -d \
              --name api-jornada-pulmonar \
              --restart unless-stopped \
              -p 3000:3000 \
              -e NODE_ENV=production \
              -e PORT=3000 \
              -e DATABASE_URL="${{ secrets.DATABASE_URL }}" \
              -e JWT_SECRET="${{ secrets.JWT_SECRET }}" \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            
            # Aguardar container iniciar
            sleep 10
            
            # Verificar se est√° rodando
            if docker ps | grep -q api-jornada-pulmonar; then
              echo "‚úÖ Container iniciado com sucesso"
              docker ps --filter name=api-jornada-pulmonar
            else
              echo "‚ùå Falha ao iniciar container"
              docker logs api-jornada-pulmonar
              exit 1
            fi
      
      - name: Cleanup old images
        if: success()
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT || 22 }}
          script: |
            # Remover imagens antigas n√£o utilizadas
            docker image prune -af --filter "until=24h" || true
      
      - name: Deployment Summary
        if: success()
        run: |
          echo "üöÄ Deploy realizado com sucesso!"
          echo ""
          echo "üì¶ Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          echo "üñ•Ô∏è  Server: ${{ secrets.SSH_HOST }}"
          echo "üî® Commit: ${{ github.sha }}"
          echo "üë§ Author: ${{ github.actor }}"
